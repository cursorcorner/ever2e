/*************************************************************************
 *                                                                       *
 *   Copyright (C) 2012 Shane Reilly                                     *
 *                                                                       *
 *   This file is part of the Ever2e Application.                        *
 *                                                                       *
 *   This file is free software: it may be redistributed and/or          *
 *   modified under the terms of the GNU General Public License as       *
 *   published by the Free Software Foundation, either version 3 of the  *
 *   License, or any later version.                                      *
 *                                                                       *
 *   This file is distributed in the hope that it will be useful, but    *
 *   without any warranty including the implied warranty of              *
 *   merchantability or fitness for a particular purpose. See the        *
 *   GNU General Public License for more details.                        *
 *                                                                       *
 *   A copy of the GNU General Public License should accompany this      *
 *   file. If it does not, it may be found at                            *
 *   <http://www.gnu.org/licenses/>.                                     *
 *                                                                       *
 *   Shane Reilly                                                        *
 *   shane@cursorcorner.net                                              *
 *                                                                       *
 *************************************************************************/
 

#include "mon560x192.h"


using namespace std;


const Uint8 Monitor560x192::CHAR_MAP[] =
{

	// Normal text

	0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
	0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
	0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
	0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
	0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
	0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
	0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
	0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
	0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
	0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
	0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
	0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
	0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
	0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
	0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
	0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
	0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
	0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
	0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
	0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
	0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
	0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
	0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
	0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
	0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
	0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
	0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
	0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
	0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
	0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
	0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
	0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
	0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
	0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
	0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
	0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
	0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
	0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
	0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
	0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
	0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
	0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
	0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
	0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
	0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
	0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
	0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
	0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
	0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
	0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
	0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
	0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
	0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
	0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
	0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
	0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
	0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
	0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
	0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
	0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
	0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
	0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
	0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
	0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
	0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
	0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
	0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
	0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
	0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
	0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
	0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
	0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
	0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
	0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
	0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
	0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
	0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
	0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
	0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
	0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
	0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
	0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
	0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
	0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
	0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
	0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
	0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
	0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
	0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
	0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
	0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
	0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
	0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
	0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
	0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
	0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
	0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
	0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
	0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
	0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
	0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
	0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
	0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
	0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
	0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
	0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
	0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
	0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
	0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
	0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
	0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
	0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
	0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
	0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
	0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
	0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
	0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
	0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
	0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
	0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
	0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
	0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
	0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x1c, 0x20, 0x3c, 0x22, 0x3c, 0x00,
	0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x1e, 0x00,
	0x00, 0x00, 0x3c, 0x02, 0x02, 0x02, 0x3c, 0x00,
	0x20, 0x20, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x00,
	0x00, 0x00, 0x1c, 0x22, 0x3e, 0x02, 0x3c, 0x00,
	0x18, 0x24, 0x04, 0x1e, 0x04, 0x04, 0x04, 0x00,
	0x00, 0x00, 0x1c, 0x22, 0x22, 0x3c, 0x20, 0x1c,
	0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
	0x08, 0x00, 0x0c, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x12, 0x0c,
	0x02, 0x02, 0x22, 0x12, 0x0e, 0x12, 0x22, 0x00,
	0x0c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x00, 0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x22, 0x00,
	0x00, 0x00, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
	0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x00, 0x00, 0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02,
	0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20,
	0x00, 0x00, 0x3a, 0x06, 0x02, 0x02, 0x02, 0x00,
	0x00, 0x00, 0x3c, 0x02, 0x1c, 0x20, 0x1e, 0x00,
	0x00, 0x04, 0x1e, 0x04, 0x04, 0x24, 0x18, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x22, 0x32, 0x2c, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x00,
	0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x1c,
	0x00, 0x00, 0x3e, 0x10, 0x08, 0x04, 0x3e, 0x00,
	0x38, 0x0c, 0x0c, 0x06, 0x0c, 0x0c, 0x38, 0x00,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x0e, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0e, 0x00,
	0x2c, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x00, 0x00,
	
	// Flash text

	0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
	0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
	0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
	0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
	0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
	0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
	0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
	0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
	0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
	0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
	0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
	0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
	0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
	0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
	0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
	0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
	0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
	0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
	0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
	0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
	0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
	0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
	0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
	0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
	0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
	0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
	0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
	0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
	0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
	0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
	0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
	0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
	0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
	0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
	0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
	0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
	0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
	0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
	0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
	0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
	0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
	0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
	0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
	0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
	0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
	0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
	0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
	0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
	0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
	0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
	0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
	0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
	0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
	0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
	0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
	0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
	0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
	0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
	0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
	0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
	0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
	0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
	0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
	0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
	0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
	0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
	0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
	0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
	0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
	0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
	0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
	0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
	0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
	0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
	0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
	0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
	0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
	0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
	0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
	0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
	0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
	0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
	0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
	0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
	0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
	0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
	0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
	0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
	0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
	0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
	0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
	0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
	0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
	0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
	0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
	0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
	0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
	0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
	0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
	0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
	0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
	0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
	0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
	0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
	0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
	0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
	0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
	0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
	0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
	0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
	0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
	0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
	0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
	0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
	0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
	0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
	0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
	0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
	0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
	0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
	0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
	0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
	0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
	0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
	0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
	0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
	0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
	0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
	0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
	0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
	0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
	0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
	0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
	0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
	0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
	0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
	0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
	0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
	0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
	0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
	0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
	0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
	0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
	0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
	0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
	0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
	0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x1c, 0x20, 0x3c, 0x22, 0x3c, 0x00,
	0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x1e, 0x00,
	0x00, 0x00, 0x3c, 0x02, 0x02, 0x02, 0x3c, 0x00,
	0x20, 0x20, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x00,
	0x00, 0x00, 0x1c, 0x22, 0x3e, 0x02, 0x3c, 0x00,
	0x18, 0x24, 0x04, 0x1e, 0x04, 0x04, 0x04, 0x00,
	0x00, 0x00, 0x1c, 0x22, 0x22, 0x3c, 0x20, 0x1c,
	0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
	0x08, 0x00, 0x0c, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x12, 0x0c,
	0x02, 0x02, 0x22, 0x12, 0x0e, 0x12, 0x22, 0x00,
	0x0c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x00, 0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x22, 0x00,
	0x00, 0x00, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
	0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x00, 0x00, 0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02,
	0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20,
	0x00, 0x00, 0x3a, 0x06, 0x02, 0x02, 0x02, 0x00,
	0x00, 0x00, 0x3c, 0x02, 0x1c, 0x20, 0x1e, 0x00,
	0x00, 0x04, 0x1e, 0x04, 0x04, 0x24, 0x18, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x22, 0x32, 0x2c, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x00,
	0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x1c,
	0x00, 0x00, 0x3e, 0x10, 0x08, 0x04, 0x3e, 0x00,
	0x38, 0x0c, 0x0c, 0x06, 0x0c, 0x0c, 0x38, 0x00,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x0e, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0e, 0x00,
	0x2c, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x00, 0x00,

	// Mouse text
	
	0x63, 0x5d, 0x55, 0x45, 0x65, 0x7d, 0x43, 0x7f,
	0x77, 0x6b, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x5d, 0x5d, 0x61, 0x7f,
	0x63, 0x5d, 0x7d, 0x7d, 0x7d, 0x5d, 0x63, 0x7f,
	0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
	0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x41, 0x7f,
	0x41, 0x7d, 0x7d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
	0x43, 0x7d, 0x7d, 0x7d, 0x4d, 0x5d, 0x43, 0x7f,
	0x5d, 0x5d, 0x5d, 0x41, 0x5d, 0x5d, 0x5d, 0x7f,
	0x63, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
	0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
	0x5d, 0x6d, 0x75, 0x79, 0x75, 0x6d, 0x5d, 0x7f,
	0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x41, 0x7f,
	0x5d, 0x49, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x7f,
	0x5d, 0x5d, 0x59, 0x55, 0x4d, 0x5d, 0x5d, 0x7f,
	0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d, 0x7d, 0x7f,
	0x63, 0x5d, 0x5d, 0x5d, 0x55, 0x6d, 0x53, 0x7f,
	0x61, 0x5d, 0x5d, 0x61, 0x75, 0x6d, 0x5d, 0x7f,
	0x63, 0x5d, 0x7d, 0x63, 0x5f, 0x5d, 0x63, 0x7f,
	0x41, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x7f,
	0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
	0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
	0x5d, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x5d, 0x7f,
	0x5d, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x5d, 0x7f,
	0x5d, 0x5d, 0x6b, 0x77, 0x77, 0x77, 0x77, 0x7f,
	0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x41, 0x7f,
	0x41, 0x79, 0x79, 0x79, 0x79, 0x79, 0x41, 0x7f,
	0x7f, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0x7f, 0x7f,
	0x41, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x41, 0x7f,
	0x7f, 0x7f, 0x77, 0x6b, 0x5d, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x7f, 0x77, 0x7f,
	0x6b, 0x6b, 0x6b, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x6b, 0x6b, 0x41, 0x6b, 0x41, 0x6b, 0x6b, 0x7f,
	0x77, 0x43, 0x75, 0x63, 0x57, 0x61, 0x77, 0x7f,
	0x79, 0x59, 0x6f, 0x77, 0x7b, 0x4d, 0x4f, 0x7f,
	0x7b, 0x75, 0x75, 0x7b, 0x55, 0x6d, 0x53, 0x7f,
	0x77, 0x77, 0x77, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x77, 0x7b, 0x7d, 0x7d, 0x7d, 0x7b, 0x77, 0x7f,
	0x77, 0x6f, 0x5f, 0x5f, 0x5f, 0x6f, 0x77, 0x7f,
	0x77, 0x55, 0x63, 0x77, 0x63, 0x55, 0x77, 0x7f,
	0x7f, 0x77, 0x77, 0x41, 0x77, 0x77, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
	0x7f, 0x7f, 0x7f, 0x41, 0x7f, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x77, 0x7f,
	0x7f, 0x5f, 0x6f, 0x77, 0x7b, 0x7d, 0x7f, 0x7f,
	0x63, 0x5d, 0x4d, 0x55, 0x59, 0x5d, 0x63, 0x7f,
	0x77, 0x73, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
	0x63, 0x5d, 0x5f, 0x67, 0x7b, 0x7d, 0x41, 0x7f,
	0x41, 0x5f, 0x6f, 0x67, 0x5f, 0x5d, 0x63, 0x7f,
	0x6f, 0x67, 0x6b, 0x6d, 0x41, 0x6f, 0x6f, 0x7f,
	0x41, 0x7d, 0x61, 0x5f, 0x5f, 0x5d, 0x63, 0x7f,
	0x47, 0x7b, 0x7d, 0x61, 0x5d, 0x5d, 0x63, 0x7f,
	0x41, 0x5f, 0x6f, 0x77, 0x7b, 0x7b, 0x7b, 0x7f,
	0x63, 0x5d, 0x5d, 0x63, 0x5d, 0x5d, 0x63, 0x7f,
	0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x6f, 0x71, 0x7f,
	0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x77, 0x7f, 0x77, 0x77, 0x7b, 0x7f,
	0x6f, 0x77, 0x7b, 0x7d, 0x7b, 0x77, 0x6f, 0x7f,
	0x7f, 0x7f, 0x41, 0x7f, 0x41, 0x7f, 0x7f, 0x7f,
	0x7b, 0x77, 0x6f, 0x5f, 0x6f, 0x77, 0x7b, 0x7f,
	0x63, 0x5d, 0x6f, 0x77, 0x77, 0x7f, 0x77, 0x7f,
	0x10, 0x08, 0x36, 0x7f, 0x3f, 0x3f, 0x7e, 0x36,
	0x10, 0x08, 0x36, 0x41, 0x21, 0x21, 0x4a, 0x36,
	0x00, 0x00, 0x02, 0x06, 0x0e, 0x1e, 0x36, 0x42,
	0x7f, 0x22, 0x14, 0x08, 0x08, 0x14, 0x2a, 0x7f,
	0x00, 0x40, 0x20, 0x11, 0x0a, 0x04, 0x04, 0x00,
	0x7f, 0x3f, 0x5f, 0x6c, 0x75, 0x7b, 0x7b, 0x7f,
	0x70, 0x60, 0x7e, 0x31, 0x79, 0x30, 0x3f, 0x02,
	0x00, 0x18, 0x07, 0x00, 0x07, 0x0c, 0x08, 0x70,
	0x08, 0x04, 0x02, 0x7f, 0x02, 0x04, 0x08, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a,
	0x08, 0x08, 0x08, 0x08, 0x49, 0x2a, 0x1c, 0x08,
	0x08, 0x1c, 0x2a, 0x49, 0x08, 0x08, 0x08, 0x08,
	0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x40, 0x40, 0x44, 0x46, 0x7f, 0x06, 0x04,
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
	0x13, 0x18, 0x1c, 0x7e, 0x1c, 0x18, 0x10, 0x6f,
	0x64, 0x0c, 0x1c, 0x3f, 0x1c, 0x0c, 0x04, 0x7b,
	0x40, 0x48, 0x08, 0x7f, 0x3e, 0x1c, 0x48, 0x40,
	0x40, 0x48, 0x1c, 0x3e, 0x7f, 0x08, 0x48, 0x40,
	0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7f,
	0x08, 0x10, 0x20, 0x7f, 0x20, 0x10, 0x08, 0x00,
	0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55,
	0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a,
	0x00, 0x3e, 0x41, 0x01, 0x01, 0x01, 0x7f, 0x00,
	0x00, 0x00, 0x3f, 0x40, 0x40, 0x40, 0x7f, 0x00,
	0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
	0x08, 0x1c, 0x3e, 0x7f, 0x3e, 0x1c, 0x08, 0x00,
	0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
	0x14, 0x14, 0x77, 0x00, 0x77, 0x14, 0x14, 0x00,
	0x7f, 0x40, 0x40, 0x4c, 0x4c, 0x40, 0x40, 0x7f,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x7b, 0x77, 0x6f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x7f, 0x7f, 0x63, 0x5f, 0x43, 0x5d, 0x43, 0x7f,
	0x7d, 0x7d, 0x61, 0x5d, 0x5d, 0x5d, 0x61, 0x7f,
	0x7f, 0x7f, 0x43, 0x7d, 0x7d, 0x7d, 0x43, 0x7f,
	0x5f, 0x5f, 0x43, 0x5d, 0x5d, 0x5d, 0x43, 0x7f,
	0x7f, 0x7f, 0x63, 0x5d, 0x41, 0x7d, 0x43, 0x7f,
	0x67, 0x5b, 0x7b, 0x61, 0x7b, 0x7b, 0x7b, 0x7f,
	0x7f, 0x7f, 0x63, 0x5d, 0x5d, 0x43, 0x5f, 0x63,
	0x7d, 0x7d, 0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x7f,
	0x77, 0x7f, 0x73, 0x77, 0x77, 0x77, 0x63, 0x7f,
	0x6f, 0x7f, 0x67, 0x6f, 0x6f, 0x6f, 0x6d, 0x73,
	0x7d, 0x7d, 0x5d, 0x6d, 0x71, 0x6d, 0x5d, 0x7f,
	0x73, 0x77, 0x77, 0x77, 0x77, 0x77, 0x63, 0x7f,
	0x7f, 0x7f, 0x49, 0x55, 0x55, 0x55, 0x5d, 0x7f,
	0x7f, 0x7f, 0x61, 0x5d, 0x5d, 0x5d, 0x5d, 0x7f,
	0x7f, 0x7f, 0x63, 0x5d, 0x5d, 0x5d, 0x63, 0x7f,
	0x7f, 0x7f, 0x61, 0x5d, 0x5d, 0x61, 0x7d, 0x7d,
	0x7f, 0x7f, 0x43, 0x5d, 0x5d, 0x43, 0x5f, 0x5f,
	0x7f, 0x7f, 0x45, 0x79, 0x7d, 0x7d, 0x7d, 0x7f,
	0x7f, 0x7f, 0x43, 0x7d, 0x63, 0x5f, 0x61, 0x7f,
	0x7f, 0x7b, 0x61, 0x7b, 0x7b, 0x5b, 0x67, 0x7f,
	0x7f, 0x7f, 0x5d, 0x5d, 0x5d, 0x4d, 0x53, 0x7f,
	0x7f, 0x7f, 0x5d, 0x5d, 0x5d, 0x6b, 0x77, 0x7f,
	0x7f, 0x7f, 0x5d, 0x5d, 0x55, 0x55, 0x49, 0x7f,
	0x7f, 0x7f, 0x5d, 0x6b, 0x77, 0x6b, 0x5d, 0x7f,
	0x7f, 0x7f, 0x5d, 0x5d, 0x5d, 0x43, 0x5f, 0x63,
	0x7f, 0x7f, 0x41, 0x6f, 0x77, 0x7b, 0x41, 0x7f,
	0x47, 0x73, 0x73, 0x79, 0x73, 0x73, 0x47, 0x7f,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x71, 0x67, 0x67, 0x4f, 0x67, 0x67, 0x71, 0x7f,
	0x53, 0x65, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
	0x7f, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x7f, 0x7f,
	0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
	0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
	0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
	0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
	0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
	0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
	0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
	0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
	0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
	0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
	0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00,
	0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x00,
	0x08, 0x3c, 0x0a, 0x1c, 0x28, 0x1e, 0x08, 0x00,
	0x06, 0x26, 0x10, 0x08, 0x04, 0x32, 0x30, 0x00,
	0x04, 0x0a, 0x0a, 0x04, 0x2a, 0x12, 0x2c, 0x00,
	0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
	0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
	0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00,
	0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
	0x1c, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x1c, 0x00,
	0x08, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x1c, 0x22, 0x20, 0x18, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x20, 0x10, 0x18, 0x20, 0x22, 0x1c, 0x00,
	0x10, 0x18, 0x14, 0x12, 0x3e, 0x10, 0x10, 0x00,
	0x3e, 0x02, 0x1e, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x38, 0x04, 0x02, 0x1e, 0x22, 0x22, 0x1c, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x04, 0x04, 0x00,
	0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00,
	0x1c, 0x22, 0x22, 0x3c, 0x20, 0x10, 0x0e, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x04, 0x00,
	0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00,
	0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00,
	0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
	0x1c, 0x22, 0x10, 0x08, 0x08, 0x00, 0x08, 0x00,
	0x1c, 0x22, 0x2a, 0x3a, 0x1a, 0x02, 0x3c, 0x00,
	0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e, 0x00,
	0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e, 0x00,
	0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x3c, 0x02, 0x02, 0x02, 0x32, 0x22, 0x3c, 0x00,
	0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00,
	0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00,
	0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22, 0x00,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3e, 0x00,
	0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x22, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x02, 0x00,
	0x1c, 0x22, 0x22, 0x22, 0x2a, 0x12, 0x2c, 0x00,
	0x1e, 0x22, 0x22, 0x1e, 0x0a, 0x12, 0x22, 0x00,
	0x1c, 0x22, 0x02, 0x1c, 0x20, 0x22, 0x1c, 0x00,
	0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x22, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
	0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00,
	0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00,
	0x3e, 0x20, 0x10, 0x08, 0x04, 0x02, 0x3e, 0x00,
	0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
	0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
	0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
	0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
	0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x1c, 0x20, 0x3c, 0x22, 0x3c, 0x00,
	0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x1e, 0x00,
	0x00, 0x00, 0x3c, 0x02, 0x02, 0x02, 0x3c, 0x00,
	0x20, 0x20, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x00,
	0x00, 0x00, 0x1c, 0x22, 0x3e, 0x02, 0x3c, 0x00,
	0x18, 0x24, 0x04, 0x1e, 0x04, 0x04, 0x04, 0x00,
	0x00, 0x00, 0x1c, 0x22, 0x22, 0x3c, 0x20, 0x1c,
	0x02, 0x02, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
	0x08, 0x00, 0x0c, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x12, 0x0c,
	0x02, 0x02, 0x22, 0x12, 0x0e, 0x12, 0x22, 0x00,
	0x0c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
	0x00, 0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x22, 0x00,
	0x00, 0x00, 0x1e, 0x22, 0x22, 0x22, 0x22, 0x00,
	0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00,
	0x00, 0x00, 0x1e, 0x22, 0x22, 0x1e, 0x02, 0x02,
	0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20,
	0x00, 0x00, 0x3a, 0x06, 0x02, 0x02, 0x02, 0x00,
	0x00, 0x00, 0x3c, 0x02, 0x1c, 0x20, 0x1e, 0x00,
	0x00, 0x04, 0x1e, 0x04, 0x04, 0x24, 0x18, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x22, 0x32, 0x2c, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x00,
	0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00,
	0x00, 0x00, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x1c,
	0x00, 0x00, 0x3e, 0x10, 0x08, 0x04, 0x3e, 0x00,
	0x38, 0x0c, 0x0c, 0x06, 0x0c, 0x0c, 0x38, 0x00,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x0e, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0e, 0x00,
	0x2c, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x00, 0x00
};

const Uint16 Monitor560x192::GR_TO_DHGR[] =
{
	0x0000, 0x0000,
	0x1111, 0x0444,
	0x2222, 0x0888,
	0x3333, 0x0ccc,
	0x0444, 0x1111,
	0x1555, 0x1555,
	0x2666, 0x1999,
	0x3777, 0x1ddd,
	0x0888, 0x2222,
	0x1999, 0x2666,
	0x2aaa, 0x2aaa,
	0x3bbb, 0x2eee,
	0x0ccc, 0x3333,
	0x1ddd, 0x3777,
	0x2eee, 0x3bbb,
	0x3fff, 0x3fff
};

const Uint16 Monitor560x192::HGR_TO_DHGR[] =
{
	0x0000,	0x0003,	0x000c,	0x000f,	0x0030,	0x0033,	0x003c,	0x003f,
	0x00c0,	0x00c3,	0x00cc,	0x00cf,	0x00f0,	0x00f3,	0x00fc,	0x00ff,
	0x0300,	0x0303,	0x030c,	0x030f,	0x0330,	0x0333,	0x033c,	0x033f,
	0x03c0,	0x03c3,	0x03cc,	0x03cf,	0x03f0,	0x03f3,	0x03fc,	0x03ff,
	0x0c00,	0x0c03,	0x0c0c,	0x0c0f,	0x0c30,	0x0c33,	0x0c3c,	0x0c3f,
	0x0cc0,	0x0cc3,	0x0ccc,	0x0ccf,	0x0cf0,	0x0cf3,	0x0cfc,	0x0cff,
	0x0f00,	0x0f03,	0x0f0c,	0x0f0f,	0x0f30,	0x0f33,	0x0f3c,	0x0f3f,
	0x0fc0,	0x0fc3,	0x0fcc,	0x0fcf,	0x0ff0,	0x0ff3,	0x0ffc,	0x0fff,
	0x3000,	0x3003,	0x300c,	0x300f,	0x3030,	0x3033,	0x303c,	0x303f,
	0x30c0,	0x30c3,	0x30cc,	0x30cf,	0x30f0,	0x30f3,	0x30fc,	0x30ff,
	0x3300,	0x3303,	0x330c,	0x330f,	0x3330,	0x3333,	0x333c,	0x333f,
	0x33c0,	0x33c3,	0x33cc,	0x33cf,	0x33f0,	0x33f3,	0x33fc,	0x33ff,
	0x3c00,	0x3c03,	0x3c0c,	0x3c0f,	0x3c30,	0x3c33,	0x3c3c,	0x3c3f,
	0x3cc0,	0x3cc3,	0x3ccc,	0x3ccf,	0x3cf0,	0x3cf3,	0x3cfc,	0x3cff,
	0x3f00,	0x3f03,	0x3f0c,	0x3f0f,	0x3f30,	0x3f33,	0x3f3c,	0x3f3f,
	0x3fc0,	0x3fc3,	0x3fcc,	0x3fcf,	0x3ff0,	0x3ff3,	0x3ffc,	0x3fff
};

void Monitor560x192::_setApplePalette()
{

	// Monochrome palette (green)
	Uint32 col = surface->colorToPixel((SDL_Color){0, 0xff, 0, 0});
	for( int palIndex = 1; palIndex<16; palIndex++ )
		applePalette[(GREEN_PAL<<4)|palIndex] = col;
	applePalette[GREEN_PAL<<4] = 0x00000000;

	// Color palette
	SDL_Color basePal[4];
	for( int palIndex = 0; palIndex<4; palIndex++ ) {
		basePal[palIndex] = hsbToColor(((3-palIndex)<<6)+paletteHue, 255, PAL_BRIGHTNESS);
		// Convert to approximate NTSC color standard
		basePal[palIndex].r = basePal[palIndex].r*30/20;
		basePal[palIndex].g = basePal[palIndex].g*30/22;
		basePal[palIndex].b = basePal[palIndex].b*30/28;
	}

	for( int palIndex = 1; palIndex<16; palIndex++ ) {

		SDL_Color mix = {0, 0, 0, 0};
		int baseIndex = 0;
		int bits = 0;
		for( Uint8 bitMask = palIndex; bitMask; bitMask >>= 1, baseIndex++ ){
			if( bitMask&0x01 ) {
				bits++;
				mix.r = min((int)(basePal[baseIndex].r)+mix.r, 255);
				mix.g = min((int)(basePal[baseIndex].g)+mix.g, 255);
				mix.b = min((int)(basePal[baseIndex].b)+mix.b, 255);
			}
		}

		mix.b = min(mix.b*4/3, 255);

/*
		if( bits>2 || palIndex==5 || palIndex==10 ) {
			mix.r = min(mix.r*4/3, 255);
			mix.g = min(mix.g*4/3, 255);
			mix.b = min(mix.b*4/3, 255);
		}
*/
		applePalette[(COLOR_PAL<<4)|palIndex] = surface->colorToPixel(mix);

	}
	applePalette[COLOR_PAL<<4] = 0x00000000;

	// Color-80 palette
	for( int palIndex = 0; palIndex<16; palIndex++ ) {
		int translateIndex = ( (palIndex<<1) & 0x0f ) | ( palIndex>>3 ); 
		applePalette[(COLOR80_PAL<<4)|palIndex] = applePalette[(COLOR_PAL<<4)|translateIndex];
	}

	// Monochrome palette (white)
	col = applePalette[(COLOR80_PAL<<4)+15];
	for( int palIndex = 1; palIndex<16; palIndex++ )
		applePalette[(MONO_PAL<<4)|palIndex] = col;
	applePalette[MONO_PAL<<4] = 0x00000000;

}
	
void Monitor560x192::_setPalType( PalType type )
{
	if( type==COLOR_PAL && (topPanel==TEXT40 || topPanel==TEXT80) )
		palType = MONO_PAL;
	else
		palType = type;
}

bool colorPalReserved;

Monitor560x192::Monitor560x192( PixelSurface* surface, Memory128k* memory )
{
	this->surface = surface;
	this->memory = memory;

	colorPalReserved = true;
	_setPalType(COLOR_PAL);
	
	setOffset(0, 0);
	resetAll();	
}

Monitor560x192::~Monitor560x192()
{
}

void Monitor560x192::commitSwitches()
{

	textType = memory->getSwitch(Memory128k::_ALTCHRSET) ? MOUSE_TEXT : NORMAL_TEXT;

	// Set visible page according to PAGE2 flag if 80STORE is off - Sather 8-19
	if( memory->getSwitch(Memory128k::_80STORE) )
		readPage = 1;
	else
		readPage = memory->getSwitch(Memory128k::_PAGE2) ? 2:1;

	if( vRefreshCount<VERTICAL_BLANK && hRefreshCount<HORIZONTAL_BLANK ) {
		loresReadAddress = getAddressLo40(readPage, vRefreshCount>>3, hRefreshCount);
		hiresReadAddress = getAddressHi40(readPage, vRefreshCount, hRefreshCount);
	}
	
	// Set top panel display

	// HIRES40M / LORES40M - Sather 8-22
	// Sather does not fully indicate whether TEXT40 bytes always ignore bit 8 despite the status of AN3
	// This could only be tested by changing Apple IIe character firmware, but it is possible that alternate,
	//   hi-bit-set character sets would be shifted (red-blue) if AN3 was reset
	// If AN3 does effect text shifting, this feature would be disabled by modes such as double-hi-res,
	//   which reset the AN3 switch, thus making it unreliable
	// A theoretical "TEXT40M" is therefor not implemented
	if( memory->getSwitch(Memory128k::_TEXT) )
		topPanel = memory->getSwitch(Memory128k::_80COL) ? TEXT80:TEXT40;
	else {
		if( memory->getSwitch(Memory128k::_HIRES) )
			topPanel = ( memory->getSwitch(Memory128k::_80COL) && !memory->getSwitch(Memory128k::_AN3) ) ? HIRES80 : ( memory->getSwitch(Memory128k::_AN3) ? HIRES40:HIRES40M );
		else
			topPanel = ( memory->getSwitch(Memory128k::_80COL) && !memory->getSwitch(Memory128k::_AN3) ) ? LORES80 : ( memory->getSwitch(Memory128k::_AN3) ? LORES40:LORES40M );
	}

	// Set bottom panel display
	if( memory->getSwitch(Memory128k::_MIXED) )
		bottomPanel = memory->getSwitch(Memory128k::_80COL) ? TEXT80:TEXT40;
	else
		bottomPanel = topPanel;

	// Force color burst cycle to off setting and store monitor color state if in text-only mode
	if( topPanel!=TEXT40 && topPanel!=TEXT80 && colorPalReserved ) {
		if( palType!=GREEN_PAL )
			palType = COLOR_PAL;
		colorPalReserved = false;
	}
	if( (topPanel==TEXT40 || topPanel==TEXT80) && palType==COLOR_PAL ) {
		palType = MONO_PAL;
		colorPalReserved = true;
	}

	currentDisplayType = vRefreshCount<TOP_PANEL_SIZE ? topPanel:bottomPanel;
	
}

void Monitor560x192::resetAll()
{

	commitSwitches();

	flashOn = false;
	hiresCarryBit = false;
	whitePalCarry = false;
	word32bit = 0;
	word32bitSize = 0;
	idleState = false;
	updateOff = false;	
	currentDisplayType = topPanel;
	hRefreshCount = 0;
	vRefreshCount = 0;
	overflowCount = 0;
	xc = 0;
	
	loresReadAddress = getAddressLo40(readPage, 0, 0);
	hiresReadAddress = getAddressHi40(readPage, 0, 0);

	paletteHue = 32;
	_setApplePalette();
	solidColor = false;
	scanlineSkip = true;

	// Blank monitor (just recovering from off state)
	for( int y = yOff; y<yOff+(VERTICAL_BLANK<<1); y++ )
		for( int x = xOff; x<xOff+HORIZONTAL_BLANK*14; x++ )
			surface->putPixel32(x, y, 0x00000000);
	
}

/**
 * Interesting
 */
void Monitor560x192::setOffset( Uint16 xOff, Uint16 yOff )
{
	this->xOff = xOff;
	this->yOff = yOff;
}

Uint8 Monitor560x192::getHRefreshCount()
{
	return hRefreshCount;
}

Uint16 Monitor560x192::getVRefreshCount()
{
	return vRefreshCount;
}

bool Monitor560x192::getVbl()
{
	return vRefreshCount >= VERTICAL_BLANK;
}

Uint8 Monitor560x192::getOverflowCount()
{
	return overflowCount;
}

bool Monitor560x192::getScanlineSkip()
{
	return scanlineSkip;
}

void Monitor560x192::setScanlineSkip( bool status )
{
	scanlineSkip = status;
}

MonitorType Monitor560x192::getMonitorType()
	// Valid types are "MONO_MONITOR", "GREEN_MONITOR", and "COLOR_MONITOR"
{

	switch( palType )
	{
	
		case MONO_PAL:
			return MONO_MONITOR;
			
		case GREEN_PAL:
			return GREEN_MONITOR;

		case COLOR_PAL:
			return COLOR_MONITOR;
		
		default:
			break;
		
	};

	cerr << "Mon560x192::setMonitorType - Pal type not recognized.\n";
	exit(1);

}

void Monitor560x192::setMonitorType( MonitorType type )
	// Valid types are "MONO_MONITOR", "GREEN_MONITOR", and "COLOR_MONITOR"
{

	switch( type )
	{
	
		case MONO_MONITOR:
			_setPalType(MONO_PAL);
			break;
			
		case GREEN_MONITOR:
			_setPalType(GREEN_PAL);
			break;

		case COLOR_MONITOR:
			_setPalType(COLOR_PAL);
			break;
			
	};
	
}

Uint8 Monitor560x192::getHue()
{
	return paletteHue;
}

void Monitor560x192::setHue( Uint8 hue )
{
	if( paletteHue != hue ) {
		paletteHue = hue;
		_setApplePalette();
	}
}

bool Monitor560x192::getSolidColor()
{
	return solidColor;
}

void Monitor560x192::setSolidColor( bool status )
{
	solidColor = status;
}

void Monitor560x192::setIdleState( bool idleState )
{
	this->idleState = idleState;
	refreshFrame();
}

bool Monitor560x192::getIdleState()
{
	return idleState;
}

void Monitor560x192::refreshFrame()
{

	bool idleStateStore = idleState;
	updateOff = true;
	idleState = false;

	// Show 1 frame of display
	for( int c = 0; c<VERTICAL_SCANS*HORIZONTAL_SCANS; c++ )
		cycle();

	updateOff = false;
	idleState = idleStateStore;

	// Fade display if idle
	if( idleState )
		for( int y = yOff; y<yOff+(VERTICAL_BLANK<<1); y++ )
			for( int x = xOff; x<xOff+HORIZONTAL_BLANK*14; x++ )
				surface->putPixel32(x, y, 0x3f3f3f3f&(surface->getPixel32(x, y) >> 2));

}

void Monitor560x192::cycle()
{

	if( idleState )
		return;

	if( hRefreshCount<HORIZONTAL_BLANK && vRefreshCount<VERTICAL_BLANK ) {
	
		// Get read address
		Uint16 word14bit = 0x00000000;
		int readOffset;
		bool shift;
		PalType currentPal = palType;
		bool currentSolidState = ( palType == COLOR_PAL ) ? solidColor : false;

		switch( currentDisplayType ) {

			case TEXT40:
				// Shift bit 7 is ignored here, and in the Apple IIe (even with custom character ROM's put in place)
				readOffset = ( flashOn && textType==NORMAL_TEXT ) ? (FLASH_TEXT<<11) : (textType<<11);
				readOffset += vRefreshCount&0x07;
				word14bit = CHAR_MAP[ readOffset + (memory->getMemPassive(0, loresReadAddress)<<3) ];
				word14bit = HGR_TO_DHGR[word14bit&0x7f];
				hiresCarryBit = false;
				break;

			case TEXT80:
				if( palType == COLOR_PAL )
					currentPal = COLOR80_PAL;
				readOffset = ( flashOn && textType==NORMAL_TEXT ) ? (FLASH_TEXT<<11) : (textType<<11);
				readOffset += vRefreshCount&0x07;
				word14bit = CHAR_MAP[ readOffset + (memory->getMemPassive(1, loresReadAddress)<<3) ];
				word14bit |= CHAR_MAP[ readOffset + (memory->getMemPassive(0, loresReadAddress)<<3) ] << 7;
				hiresCarryBit = false;
				break;

			case LORES40:
			case LORES40M:
				readOffset = hRefreshCount&0x01;
				if( vRefreshCount&0x04 )
					word14bit = GR_TO_DHGR[readOffset+((memory->getMemPassive(0, loresReadAddress)>>4)<<1)];
				else
					word14bit = GR_TO_DHGR[readOffset+((memory->getMemPassive(0, loresReadAddress)&0x0f)<<1)];
				hiresCarryBit = false;
				if( currentDisplayType==LORES40M )
					word14bit = HGR_TO_DHGR[word14bit&0x7f];
				break;

			case LORES80:
				if( palType == COLOR_PAL )
					currentPal = COLOR80_PAL;
				readOffset = hRefreshCount&0x01;
				if( vRefreshCount&0x04 ) {
					word14bit = 0x7f & GR_TO_DHGR[readOffset+((memory->getMemPassive(1, loresReadAddress)>>4)<<1)];
					word14bit |= ( 0x7f & GR_TO_DHGR[readOffset+((memory->getMemPassive(0, loresReadAddress)>>4)<<1)] ) << 7;
				}
				else {
					word14bit = 0x7f & GR_TO_DHGR[readOffset+((memory->getMemPassive(1, loresReadAddress)&0x0f)<<1)];
					word14bit |= ( 0x7f & GR_TO_DHGR[readOffset+((memory->getMemPassive(0, loresReadAddress)&0x0f)<<1)] ) << 7;
				}
				hiresCarryBit = false;
				break;

			case HIRES40:
			case HIRES40M:
				word14bit = memory->getMemPassive(0, hiresReadAddress);
				shift = word14bit&0x80;
				word14bit = HGR_TO_DHGR[word14bit&0x7f];
				if( currentDisplayType==HIRES40 && shift ) {
					word14bit = ( word14bit << 1 ) & 0x3fff;
					if( hiresCarryBit )
						word14bit |= 1;
				}
				hiresCarryBit = word14bit&0x2000;
				break;

			case HIRES80:
				if( palType == COLOR_PAL )
					currentPal = COLOR80_PAL;
				word14bit = memory->getMemPassive(1, hiresReadAddress) & 0x7f;
				word14bit |= ( memory->getMemPassive(0, hiresReadAddress) & 0x7f ) << 7;
				hiresCarryBit = false;
				break;

		}

		// Draw 14 consecutive dots of color

		word32bit |= (word14bit<<word32bitSize);
		word32bitSize += 14;

		int lineSize = 0;
		static const Uint32 blankLine[16] =
		{
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000
		};
		Uint32 cLine[16];
		while( word32bitSize >= 4 ) {
			Uint32 color;
			if( whitePalCarry && ((word32bit&0x03)==3) )
				color = applePalette[(currentPal<<4)|0x0f];
			else
				color = applePalette[(currentPal<<4)|(word32bit&0x0f)];
			Uint32 bitTest = 1;
			for( int pixel = 0; pixel<4; pixel++, bitTest<<=1 )
				if( bitTest&word32bit )
					cLine[pixel+lineSize] = color;
				else
					cLine[pixel+lineSize] = currentSolidState ? color:0x00000000;
			// Carry white 2+2 pixel artifact to enhance color text
			if( (word32bit&0x0c) == 0x0c )
				whitePalCarry = true;
			else
				whitePalCarry = false;
			lineSize += 4;
			word32bit >>= 4;
			word32bitSize -= 4;
		}

		surface->putPixelLine32(xc+xOff, (vRefreshCount<<1)+yOff, cLine, lineSize);
		if( scanlineSkip )
			surface->putPixelLine32(xc+xOff, (vRefreshCount<<1)+1+yOff, blankLine, lineSize);
		else
			surface->putPixelLine32(xc+xOff, (vRefreshCount<<1)+1+yOff, cLine, lineSize);
		xc += lineSize;

	}

	// Increment scan counters
	hRefreshCount++;
	loresReadAddress++;
	hiresReadAddress++;
	if( hRefreshCount == HORIZONTAL_SCANS ) {
		hRefreshCount = 0;
		xc = 0;
		vRefreshCount++;
		hiresCarryBit = false;
		whitePalCarry = false;
		if( vRefreshCount == VERTICAL_SCANS ) {
			vRefreshCount = 0;
			if( !idleState ) {
				overflowCount++;
				// Toggle flash every 32 emulated screen refreshes (every ~.53 sec)
				if( !(overflowCount&0x0f) )
					flashOn = !flashOn;
			}
		}
		if( vRefreshCount<VERTICAL_BLANK ) {
			currentDisplayType = vRefreshCount<TOP_PANEL_SIZE ? topPanel:bottomPanel;
			loresReadAddress = getAddressLo40(readPage, vRefreshCount>>3, 0);
			hiresReadAddress = getAddressHi40(readPage, vRefreshCount, 0);
		}
	}

}

void Monitor560x192::getPositionLores( Uint16 address, Uint16& page, Uint16& scanline, Uint16& offset )
{
	scanline = (address&0x007f)/40;
	offset = (address&0x007f)%40;
	address >>= 7;
	scanline <<= 3;
	scanline |= address&0x0007;
	page = address>>3;
	
	assert( page==1 || page==2 );
	assert( offset<HORIZONTAL_BLANK );
	assert( scanline<VERTICAL_BLANK );
}

void Monitor560x192::getPositionHires( Uint16 address, Uint16& page, Uint16& scanline, Uint16& offset )
{
	scanline = (address&0x007f)/40;
	offset = (address&0x007f)%40;
	address >>= 7;
	scanline <<= 3;
	scanline |= address&0x0007;
	address >>= 3;
	scanline <<= 3;
	scanline |= address&0x0007;
	page = address>>3;
	
	assert( page==1 || page==2 );
	assert( offset<HORIZONTAL_BLANK );
	assert( scanline<VERTICAL_BLANK );
}

Uint16 Monitor560x192::getAddressLo40( Uint16 page, Uint16 scanline, Uint16 offset )
{
	assert( page==1 || page==2 );
	assert( offset<HORIZONTAL_BLANK );
	assert( scanline<VERTICAL_BLANK );
	
	Uint16 address = page<<3;
	address |= scanline&0x0007;
	scanline >>= 3;
	address <<= 7;
	address += scanline*40 + offset;
	return address;
}

Uint16 Monitor560x192::getAddressHi40( Uint16 page, Uint16 scanline, Uint16 offset )
{
	assert( page==1 || page==2 );
	assert( offset<HORIZONTAL_BLANK );
	assert( scanline<VERTICAL_BLANK );
	
	Uint16 address = page<<3;
	address |= scanline&0x0007;
	scanline >>= 3;
	address <<= 3;
	address |= scanline&0x0007;
	scanline >>= 3;
	address <<= 7;
	address += scanline*40 + offset;
	return address;
}

void Monitor560x192::store( SaveState &state, States states )
{

	state.startChecksum();

	if( states & HARDWARE_STATE )
	{
		state.write8(hRefreshCount);
		state.write16(vRefreshCount);
		state.write16(xc);
		state.write8(overflowCount);
		state.writeBool(flashOn);
		state.writeBool(hiresCarryBit);
		state.writeBool(whitePalCarry);
		state.write32(word32bit);
		state.write16(word32bitSize);		
		state.write16(textType);
		state.write16(topPanel);
		state.write16(bottomPanel);
		state.write16(currentDisplayType);		
		state.write16(readPage);
		state.write16(loresReadAddress);
		state.write16(hiresReadAddress);		
		state.writeChecksum();
	}

	if( states & SETTING_STATE )
	{	
		state.write16(palType);
		state.write8(paletteHue);
		state.writeBool(solidColor);
		state.writeBool(scanlineSkip);
		state.writeBool(colorPalReserved);
		state.writeChecksum();
	}

	state.writeChecksum();
	
}

int Monitor560x192::restore( SaveState &state, States states )
{

	// Disregard:
	//   idleState - only set by event handler
	//   updateOff - temporary variable
	// xOff = state.read16();
	// yOff = state.read16();
	
	state.startChecksum();

	if( states & HARDWARE_STATE )
	{		
		hRefreshCount = state.read8();
		vRefreshCount = state.read16();
		xc = state.read16();
		overflowCount = state.read8();
		flashOn = state.readBool();
		hiresCarryBit = state.readBool();
		whitePalCarry = state.readBool();
		word32bit = state.read32();
		word32bitSize = state.read16();
		textType = (TextType) state.read16();
		topPanel = (DisplayType) state.read16();
		bottomPanel = (DisplayType)state.read16();
		currentDisplayType = (DisplayType)state.read16();
		readPage = state.read16();
		loresReadAddress = state.read16();
		hiresReadAddress = state.read16();		
	}

	if( states & SETTING_STATE )
	{
		palType = (PalType) state.read16();
		paletteHue = state.read8();
		solidColor = state.readBool();
		scanlineSkip = state.readBool();
		colorPalReserved = state.readBool();		
	}

	// Check data integrity
	if( state.verifyChecksum() ) {
		resetAll();
		return 1;
	}

	_setApplePalette();
	_setPalType(palType);
	commitSwitches();
	
	return 0;
	
}
